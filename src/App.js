import React from "react";
import axios from "axios";
import ReactAplayer from "react-aplayer";

import {
  addResponseMessage,
  renderCustomComponent,
  setQuickButtons,
  toggleMsgLoader,
  toggleWidget,
  Widget,
} from "react-chat-widget";
import "react-chat-widget/lib/styles.css";
import "./App.css";

const MESSAGE_URL = "/message";
const AUDIO_URL = "/audio";
const MESSAGE2AUDIO_URL = "/message2audio";

const MUSIC_URL = "http://music.163.com/song/media/outer/url?id=1318234987.mp3";

const b64toBlob = (b64Data, contentType = "", sliceSize = 512) => {
  const byteCharacters = atob(b64Data);
  const byteArrays = [];

  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    const slice = byteCharacters.slice(offset, offset + sliceSize);

    const byteNumbers = new Array(slice.length);
    for (let i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }

    const byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
  }

  return new Blob(byteArrays, { type: contentType });
};

class AudioComponent extends React.Component {
  render() {
    return (
      <audio
        controls="controls"
        className={this.props.isUserAudio ? "user-audio" : ""}
      >
        <source src={this.props.src} />
      </audio>
    );
  }
}

class MixedComponent extends React.Component {
  state = { isPlaying: false };
  constructor(props) {
    super(props);
    this.ref = React.createRef();
  }

  handleButtonClicked = () => {
    const audio = this.ref.current;

    if (this.state.isPlaying) {
      audio.pause();
      audio.currentTime = 0;
    } else {
      audio.play();
    }
  };

  render() {
    return (
      <>
        <div className="rcw-response">
          <div className="rcw-message-text">
            <p>{this.props.text}</p>
          </div>
          {this.props.src ? (
            <audio
              ref={this.ref}
              className="not-played"
              preload="preload"
              onPlay={() => {
                this.setState({ isPlaying: true });
              }}
              onPause={() => {
                this.setState({ isPlaying: false });
              }}
            >
              <source src={this.props.src} />
            </audio>
          ) : undefined}
        </div>
        {this.props.src ? (
          <div className="attach-button" onClick={this.handleButtonClicked}>
            <div className={this.state.isPlaying ? "stop" : "play"} />
          </div>
        ) : undefined}
      </>
    );
  }
}

class App extends React.Component {
  state = { recording: false };
  recorder = undefined;
  audioChunks = [];

  playFirstAudio = () => {
    const nextAudio = this.audioPlayList.shift();
    if (nextAudio) {
      nextAudio.className = "played";
      nextAudio.play();
    }
  };

  playPlaylist = () => {
    this.audioPlayList = [...document.getElementsByClassName("not-played")];

    for (let audio of this.audioPlayList) {
      audio.onended = this.playFirstAudio;
    }

    this.playFirstAudio();
  };

  renderAudioMessage = (src, isUserAudio = false) => {
    renderCustomComponent(AudioComponent, { src, isUserAudio }, !isUserAudio);
  };

  renderMusicPlayer = (
    audio = {
      name: "下山",
      artist: "要不要买菜",
      url: "http://music.163.com/song/media/outer/url?id=1404885266.mp3",
      cover:
        "https://bkimg.cdn.bcebos.com/pic/c9fcc3cec3fdfc0386587feedb3f8794a4c22647?x-bce-process=image/resize,m_lfit,w_268,limit_1/format,f_jpg",
    }
  ) => {
    renderCustomComponent(ReactAplayer, { audio }, true);
  };

  handleNewUserMessage = async (text) => {
    toggleMsgLoader();
    try {
      const response = await axios.post(MESSAGE2AUDIO_URL, {
        sender: "web",
        message: text,
      });

      console.log(response);

      response.data.forEach((item) => {
        const { text, attachment, audio } = item;
        let src = "";

        // text response
        if (text) {
          // audio response, refers to wav file that generated by tts module
          if (audio) {
            const blob = b64toBlob(audio, "audio/wav");
            src = URL.createObjectURL(blob);
          }
          renderCustomComponent(MixedComponent, { text, src }, true);
        }

        // attachment response, refers to music url
        if (attachment) this.renderMusicPlayer({ url: attachment });
      });

      this.playPlaylist();
    } catch (e) {
      console.log(e.toString());
    }
    toggleMsgLoader();
  };

  // send the whole chunk after stop recording
  handleRecorderStopped = async () => {
    const audioBlob = new Blob(this.audioChunks, {
      type: "audio/wav; codecs=0",
    });

    // render audio player as user message
    const audioUrl = URL.createObjectURL(audioBlob);
    this.renderAudioMessage(audioUrl, true);
    toggleMsgLoader();

    // sender the audio blob to server
    let formData = new FormData();
    formData.append("name", "webAudioBlob");
    formData.append("file", audioBlob);

    try {
      const response = await axios.post(AUDIO_URL, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      console.log(response);

      response.data.forEach((item) => {
        const { text, attachment, audio } = item;

        // text response
        if (text) addResponseMessage(text);

        // attachment response, refers to music url
        if (attachment) this.renderAudioMessage(attachment);

        // base64 attachment response, refers to wav file from server
        if (audio) {
          const blob = b64toBlob(audio, "audio/wav");
          const blobUrl = URL.createObjectURL(blob);
          this.renderAudioMessage(blobUrl);
        }
      });
    } catch (e) {
      console.log(e.toString());
    }

    toggleMsgLoader();
  };

  // send the chunks every interval
  handleRecorderStream = (e) => {
    console.log(e);
    if (this.webSocket.readyState === this.webSocket.OPEN) {
      const blob = new Blob(this.audioChunks, { type: "audio/wav" });
      this.webSocket.send(blob);
      this.audioChunks = [];
    }
  };

  handleQuickButtonClicked = async (value) => {
    switch (value) {
      // value === 0: "stop" button clicked
      case 0:
        // if it is recording, stop it
        if (this.state.recording) {
          this.recorder.stop();
        }
        // clear the interval
        clearInterval(this.intervalId);
        // close the webSocket
        if (this.webSocket.readyState !== this.webSocket.OPEN) {
          this.webSocket.close();
        }

        this.setState({ recording: false });
        setQuickButtons([{ label: "RECORD", value: 1 }]);
        break;

      // value === 1: "record" button clicked
      case 1:
        // if not recording, start to record voice
        if (!this.state.recording) {
          const stream = await navigator.mediaDevices.getUserMedia({
            audio: true,
          });

          this.recorder = new MediaRecorder(stream);

          setQuickButtons([{ label: "STOP", value: 0 }]);
          document.getElementsByClassName("quick-button")[0].className =
            "quick-button bd-red";

          // collect audio data into chunk
          this.audioChunks = [];
          this.recorder.addEventListener("dataavailable", (event) => {
            this.audioChunks.push(event.data);
            console.log(
              "WS state after available:",
              this.webSocket.readyState === this.webSocket.OPEN
            );
          });

          // send the recorded data when recorder is stopped
          this.recorder.addEventListener("stop", this.handleRecorderStream);

          this.setState({ recording: true });

          // initialize webSocket
          this.webSocket = new WebSocket("ws://localhost:8000/ws");
          this.webSocket.onmessage = (ev) => {
            let msg = ev.data;
            console.log("Ws receiving: ", msg);
          };

          this.recorder.start();

          // send the data of recorder every 1000ms
          this.intervalId = setInterval(() => {
            this.recorder.stop();
            this.recorder.start();
          }, 1000);
        } else {
          this.setState({ recording: false });
          setQuickButtons([{ label: "RECORD", value: 1 }]);
        }
        break;
      // error handling, should never reach here
      default:
        this.setState({ recording: false });
        setQuickButtons([{ label: "RECORD", value: 1 }]);
        break;
    }
  };

  componentDidMount() {
    toggleWidget();
    this.renderAudioMessage(MUSIC_URL);
    addResponseMessage("Hello, this is rasa bot");
    setQuickButtons([{ label: "RECORD", value: 1 }]);
    this.renderMusicPlayer();
    renderCustomComponent(
      MixedComponent,
      { text: "hello", src: MUSIC_URL },
      true
    );
    renderCustomComponent(MixedComponent, { text: "hello" }, true);
  }

  render() {
    return (
      <Widget
        title="Hello World"
        subtitle="music playing and weather querying"
        profileAvatar="/images/robot.png"
        handleNewUserMessage={this.handleNewUserMessage}
        handleQuickButtonClicked={this.handleQuickButtonClicked}
      />
    );
  }
}

export default App;
